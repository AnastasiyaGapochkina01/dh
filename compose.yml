services:
  app-blue:
    image: ${BLUE_APP_IMAGE}
    container_name: "${PRJ_NAME}-blue"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env
 #   environment:
 #     DB_USER: ${POSTGRES_USER}
 #     DB_PASS: ${POSTGRES_PASSWORD}
 #     DB_HOST: ${POSTGRES_HOST}
 #     DB_NAME: ${POSTGRES_DB}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
      - .:/app

  app-green:
    image: ${GREEN_APP_IMAGE}
    container_name: "${PRJ_NAME}-green"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env
 #   environment:
 #     DB_USER: ${POSTGRES_USER}
 #     DB_PASS: ${POSTGRES_PASSWORD}
 #     DB_HOST: ${POSTGRES_HOST}
 #     DB_NAME: ${POSTGRES_DB}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
      - .:/app

  load-balancer:
    image: nginx
    container_name: "${PRJ_NAME}-lb"
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/downhill.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app-blue
      - app-green
    env_file:
      - ./.env

  db:
    image: postgres:15
    restart: always
    container_name: "${PRJ_NAME}-db"
    env_file:
      - ./.env
#    environment:
#      POSTGRES_DB: ${POSTGRES_DB}
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

volumes:
  postgres_data:
