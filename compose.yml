services:
  app-blue:
    build: .
    #image: ${APP_IMAGE}:blue
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      DB_HOST: ${POSTGRES_HOST}
      DB_NAME: ${POSTGRES_DB}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  app-green:
    build: .
    #image: ${APP_IMAGE}:green
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      DB_HOST: ${POSTGRES_HOST}
      DB_NAME: ${POSTGRES_DB}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  load-balancer:
    image: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/downhill.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      app-blue:
        condition: service_healthy
      app-green:
        condition: service_healthy

  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

volumes:
  postgres_data:
